# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:
let
  sources = import ./nix/sources.nix;
  lanzaboote = import sources.lanzaboote;
  impermanence = fetchTarball
    "https://github.com/nix-community/impermanence/archive/master.tar.gz";
in {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    lanzaboote.nixosModules.lanzaboote
    <nixos-hardware/framework/13-inch/7040-amd>
    "${impermanence}/nixos.nix"
  ];

  services.power-profiles-daemon.enable = true;

  boot = {
    initrd = {
      availableKernelModules =
        [ "nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod" "amdgpu" ];
      kernelModules = [ ];
      systemd.enable = true;
      luks.devices = {
        "cryptroot".device =
          "/dev/disk/by-uuid/be7af1e7-2193-4ff7-91f5-90b9690a1ca3";
        "cryptswap".device =
          "/dev/disk/by-uuid/b9af0d1a-1e8a-4768-bd11-6c9495549e5f";
      };
    };
    kernelModules = [ "kvm-amd" ];
    extraModulePackages = [ ];
    lanzaboote = {
      enable = true;
      pkiBundle = "/etc/secureboot";
    };
    loader = {
      efi.canTouchEfiVariables = true;
      timeout = lib.mkDefault 0;
      systemd-boot = {
        extraInstallCommands = ''
          echo "default @saved" > /boot/loader/loader.conf
        '';
        configurationLimit = 2;
        enable = lib.mkForce false;
        editor = false;
      };
    };
  };

  fileSystems = {
    "/home/alex/Documents/Programming" = {
      device = "/dev/disk/by-uuid/4bcd078c-f295-4626-a80f-f77d42347411";
      fsType = "btrfs";
      options = [ "subvol=@Programming" ];
    };
    "/" = {
      device = "none";
      fsType = "tmpfs";
      options = [ "defaults" "size=8G" "mode=755" ];
    };
    "/home" = {
      device = "/dev/disk/by-uuid/4bcd078c-f295-4626-a80f-f77d42347411";
      fsType = "btrfs";
      options = [ "subvol=@nixhome" ];
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/740C-0338";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/4bcd078c-f295-4626-a80f-f77d42347411";
      fsType = "btrfs";
      options = [ "subvol=@nixtmpfsnix" ];
      neededForBoot = true;
    };
  };

  swapDevices = [{ device = "/dev/mapper/cryptswap"; }];

  environment.persistence."/nix/persist" = {
    hideMounts = true;
    directories = [
      "/etc/nixos"
      "/etc/secureboot"
      "/var/log"
      "/var/lib/docker"
      "/var/lib/nixos"
      "/var/lib/fprint"
      "/var/lib/bluetooth"
      {
        directory = "/var/lib/private";
        mode = "u=rwx,g=,o=";
      }
      "/var/lib/tailscale"
      "/etc/NetworkManager/system-connections"
      "/root"
    ];
    files = [
      "/etc/machine-id"
      {
        file = "/etc/nix/id_rsa";
        parentDirectory = { mode = "u=rwx,g=rw,o=rw"; };
      }
    ];
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
